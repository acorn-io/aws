name:        "AWS S3"
description: "Amazon's Simple Storage Service"
info:        "\(localData.info)"
icon:        "amazon-s3.svg"

args: {
	// Name to assign bucket during creation
	bucketName: "MyBucket"
	// Version the objects in the bucket
	versioned: true
	// Key value pairs to apply to all resources
	tags: {}
	// Deletion protection, you must set to false in order for the S3 bucket to be deleted. Default value is false.
	deletionProtection: false
}

services: readwrite: {
	name:    "S3 Bucket Read and Write"
	default: true
	generated: job: "apply"
	consumer: permissions: rules: [{
		apiGroups: ["aws.acorn.io"]
		verbs: ["s3:Get*", "s3:List*", "s3:Put*", "s3:AbortMultipartUpload", "s3:Delete*"]
		resources: ["*"]
	}]
}

services: readonly: {
	name: "S3 Bucket Read Only"
	generated: job: "apply"
	consumer: permissions: rules: [{
		apiGroups: ["aws.acorn.io"]
		verbs: ["s3:Get*", "s3:List*"]
		resources: ["*"]
	}]
}

services: writeonly: {
	name: "S3 Bucket Write Only"
	generated: job: "apply"
	consumer: permissions: rules: [{
		apiGroups: ["aws.acorn.io"]
		verbs: ["s3:Put*", "s3:AbortMultipartUpload"]
		resources: ["*"]
	}]
}

services: admin: {
	name: "S3 Bucket Admin"
	generated: job: "apply"
	consumer: permissions: rules: [{
		apiGroups: ["aws.acorn.io"]
		verbs: ["s3:*"]
		resources: ["*"]
	}]
}

jobs: {
	cleanup: {
		build: {
			context:    "../utils/s3-cleanup/"
			dockerfile: "../utils/s3-cleanup/Dockerfile"
		}
		env: {
			ACORN_EXTERNAL_ID:            "@{acorn.externalID}"
			CDK_RUNNER_DELETE_PROTECTION: "\(args.deletionProtection)"
		}
		events: ["delete"]
		permissions: rules: [{
			apiGroup: "aws.acorn.io"
			verbs: [
				"cloudformation:DescribeStacks",
				"cloudformation:DescribeStackResources",
				"s3:ListBucketVersions",
				"s3:DeleteObject",
				"s3:DeleteObjectVersion",
			]
			resources: ["*"]
		}]
	}

	apply: {
		dependsOn: ["cleanup"]
		build: {
			context:    "."
			dockerfile: "Dockerfile"
			additionalContexts: {
				common: "../libs"
				utils:  "../utils"
			}
		}
		files: "/app/config.json": std.toJSON(args)
		env: {
			CDK_DEFAULT_ACCOUNT:          "@{secrets.aws-context.account-id}"
			CDK_DEFAULT_REGION:           "@{secrets.aws-context.aws-region}"
			VPC_ID:                       "@{secrets.aws-context.vpc-id}"
			ACORN_ACCOUNT:                "@{acorn.account}"
			ACORN_NAME:                   "@{acorn.name}"
			ACORN_PROJECT:                "@{acorn.project}"
			ACORN_EXTERNAL_ID:            "@{acorn.externalID}"
			CDK_RUNNER_DELETE_PROTECTION: "\(args.deletionProtection)"
		}
		events: ["create", "update", "delete"]
		permissions: rules: [{
			apiGroup: "aws.acorn.io"
			verbs: [
				"cloudformation:DescribeStacks",
				"cloudformation:CreateChangeSet",
				"cloudformation:DescribeStackEvents",
				"cloudformation:DescribeStackResources",
				"cloudformation:DescribeChangeSet",
				"cloudformation:ExecuteChangeSet",
				"cloudformation:PreviewStackUpdate",
				"cloudformation:UpdateStack",
				"cloudformation:GetTemplateSummary",
				"cloudformation:DeleteStack",
				"s3:CreateBucket",
				"s3:DeleteBucket",
				"s3:PutBucketVersioning",
				"s3:GetBucketVersioning",
				"s3:PutBucketTagging",
				"s3:GetBucketTagging",
				"s3:PutBucketPolicy",
				"s3:GetBucketPolicy",
				"s3:DeleteBucketPolicy",
			]
			resources: ["*"]
		}, {
			apiGroup: "aws.acorn.io"
			verbs: [
				"ec2:DescribeAvailabilityZones",
				"ec2:DescribeVpcs",
				"ec2:DescribeSubnets",
				"ec2:DescribeRouteTables",
			]
			resources: ["*"]
		}, {
			apiGroup: "api.acorn.io"
			verbs: [
				"create",
			]
			resources: ["events"]
		}]
	}
}

secrets: "aws-context": {
	name:     "AWS Context"
	external: "context://aws"
	type:     "opaque"
	data: {
		"account-id": ""
		"vpc-id":     ""
		"aws-region": ""
	}
}

localData: info: """
	## How To Use ([examples](https://github.com/acorn-io/aws/tree/main/s3/examples))
	
	1) Declare that your app consumes an acorn named "s3" via an `external` link to this acorn.
	
	```typescript
		services: s3: {
			external: "@{acorn.name}"
		}
		containers: app: {
				build: context: "./"
				ports: publish: ["8080/http"]
				consumes: ["s3"]
				env: {
						 BUCKET_URL: "@{@{service.}s3.data.url}"
						 BUCKET_NAME: "@{@{service.}s3.data.name}"
						 BUCKET_ARN: "@{@{service.}s3.data.arn}"
				}
		}
	```
	"""
