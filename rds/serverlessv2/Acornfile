args: {
	// Name of the root/admin user. Default is admin
	adminUsername: "admin"
	// Name of an additional user to create. This user will have complete access to the database.
	// If left empty, no additional user will be created.
	username: ""
	// Name of the database. Default is instance
	dbName: "instance"
	// Deletion protection, you must set to false in order for the RDS db to be deleted. Default is false
	deletionProtection: false
	// Size of the instance. Default is small. (Deprecated no longer has an effect)
	instanceSize: "small"
	// Aurora Capacity Units minimum value must be 1, 2, 4, 8, 16, 32, 64, 128, 256, 384. Default is .5.
	auroraCapacityUnitsV2Min: 0.5
	// Aurora Capacity Units maximum value must be 1, 2, 4, 8, 16, 32, 64, 128, 256, 384. Default is 8.
	auroraCapacityUnitsV2Max: 8
	// RDS MySQL Database Parameters to apply to the cluster. Must be k/v string pairs(ex. max_connections: "1000").
	parameters: {}
	// Do not take a final snapshot on delete or update and replace operations. Default is false. If skip is enabled the DB will be gone forever if deleted or replaced.
	skipSnapshotOnDelete: false
	// Enable Performance Insights. Default is false.
	enablePerformanceInsights: false
	// Key value pairs of tags to apply to the RDS cluster and all other resources.
	tags: {}
}

services: rds: {
	default: true
	generated: job: "apply"
}

services: "cdk-context": build: "../../utils/cdk"

jobs: apply: {
	build: {
		context: ".."
		buildArgs: MAIN: "serverlessv2"
		additionalContexts: {
			common: "../../libs"
			utils:  "../../utils"
		}
	}
	files: {
		"/app/cdk.context.json": "@{services.cdk-context.data.cdkContext}"
		"/app/config.json":      std.toJSON(args)
	}
	env: {
		CDK_DEFAULT_ACCOUNT: "@{services.cdk-context.data.accountID}"
		CDK_DEFAULT_REGION:  "@{services.cdk-context.data.region}"
		VPC_ID:              "@{services.cdk-context.data.vpcID}"
		ACORN_ACCOUNT:       "@{acorn.account}"
		ACORN_NAME:          "@{acorn.name}"
		ACORN_PROJECT:       "@{acorn.project}"
		DB_NAME:             args.dbName
		DB_USERNAME:         args.username
		ACORN_EXTERNAL_ID:   "@{acorn.externalID}"
	}
	permissions: rules: [
		{
			apiGroup: "aws.acorn.io"
			verbs: [
				"cloudformation:DescribeStacks",
				"cloudformation:CreateChangeSet",
				"cloudformation:DescribeChangeSet",
				"cloudformation:ListChangeSets",
				"cloudformation:DescribeStackEvents",
				"cloudformation:DescribeStackResources",
				"cloudformation:ExecuteChangeSet",
				"cloudformation:PreviewStackUpdate",
				"cloudformation:UpdateStack",
				"cloudformation:RollbackStack",
				"cloudformation:GetTemplate",
				"cloudformation:GetTemplateSummary",
				"cloudformation:DeleteStack",
				"ssm:GetParameters",
				"secretsmanager:*",
				"ec2:*",
				"rds:*",
			]
			resources: ["*"]
		}, {
			apiGroup: "aws.acorn.io"
			verbs: ["iam:CreateServiceLinkedRole"]
			resources: ["arn:aws:iam::*:role/aws-service-role/rds.amazonaws.com/AWSServiceRoleForRDS"]
		}, {
			apiGroup: "api.acorn.io"
			verbs: [
				"create",
			]
			resources: ["events"]
		},
	]
	events: ["create", "update", "delete"]
}

if args.username != "" {
	jobs: "create-user": {
		build: images.user.containerBuild
		dependsOn: ["apply"]
		env: {
			MYSQL_ADMIN_USER:     args.adminUsername
			MYSQL_ADMIN_PASSWORD: "@{secrets.admin.password}"
			MYSQL_USER:           args.username
			MYSQL_PASSWORD:       "@{secrets.user.password}"
			MYSQL_HOST:           "@{service.rds.address}"
			MYSQL_DATABASE:       args.dbName
		}
	}

	secrets: user: {
		type: "basic"
		data: username: args.username
	}
}

images: user: containerBuild: {
	context: ".."
	target:  "user"
}

secrets: admin: {
	type: "generated"
	params: job: "apply"
}
