name:        "AWS Elasticache Memcached"
description: "Amazon's Memcached compatible Elasticache cluster"
info:        "\(localData.info)"
readme:      "./README.md"
icon:        "./memcached.svg"

args: {
	// Name assigned to the cluster during creation alongside a unique ID. Default value is "Memcached".
	clusterName: "Memcached"

	// Key value pairs to apply to all resources.
	tags: {}

	// Deletion protection. Must be set to false in order to delete the Memcached clutser. Default value is false.
	deletionProtection: false

	// The cache node type used in the elasticache cluster. See https://aws.amazon.com/elasticache/pricing/ for a list of options. Default value is "cache.t4g.micro".
	nodeType: "cache.t4g.micro"

	// The number of cache nodes used in the elasticache cluster. Default value is 1.
	numNodes: 1

	// Enables TLS for connections to the cluster when true. Default value is false.
	transitEncryption: false
}

services: admin: {
	name:    "Memcached Admin"
	default: true
	generated: job: "apply"
}

jobs: apply: {
	memory: 768Mi
	build: {
		context:    "../"
		dockerfile: "../memcached.Dockerfile"
		additionalContexts: common: "../../libs"
	}
	files: "/app/config.json": std.toJSON(args)
	env: {
		CDK_DEFAULT_ACCOUNT:          "@{secrets.aws-context.account-id}"
		CDK_DEFAULT_REGION:           "@{secrets.aws-context.aws-region}"
		VPC_ID:                       "@{secrets.aws-context.vpc-id}"
		ACORN_ACCOUNT:                "@{acorn.account}"
		ACORN_NAME:                   "@{acorn.name}"
		ACORN_PROJECT:                "@{acorn.project}"
		ACORN_EXTERNAL_ID:            "@{acorn.externalID}"
		CDK_RUNNER_DELETE_PROTECTION: "\(args.deletionProtection)"
	}
	events: ["create", "update", "delete"]
	permissions: rules: [{
		apiGroup: "aws.acorn.io"
		verbs: [
			"cloudformation:DescribeStacks",
			"cloudformation:CreateChangeSet",
			"cloudformation:DescribeStackEvents",
			"cloudformation:DescribeStackResources",
			"cloudformation:DescribeChangeSet",
			"cloudformation:ExecuteChangeSet",
			"cloudformation:PreviewStackUpdate",
			"cloudformation:UpdateStack",
			"cloudformation:GetTemplateSummary",
			"cloudformation:DeleteStack",
			"cloudformation:GetTemplate",
			"ec2:*",
			"elasticache:*",
			"secretsmanager:*",
		]
		resources: ["*"]
	}, {
		apiGroup: "aws.acorn.io"
		verbs: [
			"iam:CreateServiceLinkedRole",
		]
		resources: ["arn:aws:iam::*:role/aws-service-role/elasticache.amazonaws.com/AWSServiceRoleForElastiCache"]
	}, {
		apiGroup: "api.acorn.io"
		verbs: [
			"create",
		]
		resources: ["events"]
	}]
}

secrets: "aws-context": {
	name:     "AWS Context"
	external: "context://aws"
	type:     "opaque"
	data: {
		"account-id": ""
		"vpc-id":     ""
		"aws-region": ""
	}
}

localData: info: """
	## How To Use ([examples](https://github.com/acorn-io/aws/tree/main/elasticache/memcached/examples))

	1) Link your app with this acorn via an `external` service named "memcached".

	```typescript
			 services: memcached: {
					external: "@{acorn.name}"
			 }
			 containers: app: {
					build: context: "./"
					ports: publish: ["8080/http"]
					env: {
							MEMCACHED_HOST: "@{@{service.}memcached.address}"
							MEMCACHED_PORT: "@{@{service.}memcached.data.port}"
					 }
			 }
	```
	"""
